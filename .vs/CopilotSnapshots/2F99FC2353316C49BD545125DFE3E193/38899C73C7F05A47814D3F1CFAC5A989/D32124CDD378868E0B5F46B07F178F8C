using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data; 
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace WpfApp1
{
    public partial class MainWindow : Window, INotifyPropertyChanged 
    {
        private string _rowsInput = string.Empty;
        private string _columnsInput = string.Empty;
        private DataTable _gridData = new DataTable(); 

        public string RowsInput
        {
            get => _rowsInput;
            set 
            { 
                if (_rowsInput != value) 
                {
                    _rowsInput = value; 
                    OnPropertyChanged(nameof(RowsInput));
                    UpdateGridData();
                }
            }
        }

        public string ColumnsInput
        {
            get => _columnsInput;
            set 
            { 
                if (_columnsInput != value) 
                {
                    _columnsInput = value; 
                    OnPropertyChanged(nameof(ColumnsInput));
                    UpdateGridData();
                }
            }
        }

        public DataTable GridData
        {
            get => _gridData;
            set { _gridData = value; OnPropertyChanged(nameof(GridData)); }
        }

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;
        }

        private void UpdateGridData()
        {
            if (!int.TryParse(RowsInput, out int rows) || !int.TryParse(ColumnsInput, out int columns) || rows < 1 || columns < 1)
            {
                _gridData.Clear();
                while (_gridData.Columns.Count > 0) _gridData.Columns.RemoveAt(0);
                return;
            }

            // Optimize: Only update columns if changed
            if (_gridData.Columns.Count != columns)
            {
                _gridData.Clear();
                _gridData.Columns.Clear();
                for (int j = 0; j < columns; j++)
                    _gridData.Columns.Add($"C{j + 1}");
            }

            // Adjust rows
            while (_gridData.Rows.Count < rows)
            {
                var row = _gridData.NewRow();
                for (int j = 0; j < columns; j++)
                    row[j] = $"R{_gridData.Rows.Count + 1}C{j + 1}";
                _gridData.Rows.Add(row);
            }
            while (_gridData.Rows.Count > rows)
                _gridData.Rows.RemoveAt(_gridData.Rows.Count - 1);

            // Update cell values
            for (int i = 0; i < rows; i++)
                for (int j = 0; j < columns; j++)
                    _gridData.Rows[i][j] = $"R{i + 1}C{j + 1}";
        }

        public event PropertyChangedEventHandler? PropertyChanged;
        protected void OnPropertyChanged(string name)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
    }
}